import numpy as np
import cv2
from matplotlib import pyplot as plt

MIN_AREA = 50  # Minimum acceptable area
MAX_AREA = 1000  # Maximum acceptable area


def filter_regions(points):
    """
    Filters regions in the point cloud that are too large or too small.
    """
    # Remove regions with areas larger than MAX_AREA or smaller than MIN_AREA
    # For this example, we'll simply check the pairwise distance between points, but this can be adjusted as needed
    filtered_points = [
        p for p in points if MIN_AREA < np.linalg.norm(p[1] - p[0]) < MAX_AREA
    ]

    return np.array(filtered_points)


def a3_function_2d(points):
    """
    Calculates the angle between 3 points in a point cloud based
    on the files generated by the 2D models, over a set of random points.

    """

    # Sample indices for random triples
    n = len(points)
    indices = np.random.default_rng(42).choice(n, size=(100, 3))

    # Calculate angles
    v1 = points[indices[:, 0]]
    v2 = points[indices[:, 1]]
    v3 = points[indices[:, 2]]
    vectors1 = v1 - v2
    vectors2 = v3 - v2

    dot_products = np.sum(vectors1 * vectors2, axis=-1)

    # Normalize vectors
    norms1 = np.linalg.norm(vectors1, axis=-1)
    norms2 = np.linalg.norm(vectors2, axis=-1)

    # Deals with any invalid values
    with np.errstate(invalid="ignore"):
        angles = np.arccos(dot_products / (norms1 * norms2))

    # remove nans from invalid angles
    angles = np.rad2deg(angles)
    angles = angles[~np.isnan(angles)]

    return angles


def process_image(image_path):
    # Read image
    image = cv2.imread(image_path)

    # Extract unique colors and calculate angles for each color
    unique_colors = np.unique(image.reshape(-1, image.shape[2]), axis=0)
    print(unique_colors.shape)
    angles_list = []
    for color in unique_colors:
        mask = np.all(image == color, axis=-1)
        points = np.column_stack(np.where(mask))
        points = filter_regions(points)
        angles = a3_function_2d(points)
        angles_list.append(angles)

    return angles_list


def plot_histogram(angles_list):
    for angles in angles_list:
        plt.hist(angles, bins=50, alpha=0.5, histtype="step")
    plt.xlabel("Angles")
    plt.ylabel("Frequency")
    plt.title("Angle distribution for different segmentations")

    # save plot
    plt.savefig("output/angle_distribution.png")


if __name__ == "__main__":
    image_path = "output/dog.jpg"
    angles_list = process_image(image_path)
    plot_histogram(angles_list)
